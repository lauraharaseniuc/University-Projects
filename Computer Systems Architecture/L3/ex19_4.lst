     1                                  bits 32 ;asamblare și compilare pentru arhitectura de 32 biți
     2                                  ; definim punctul de intrare in programul principal
     3                                  global start
     4                                  
     5                                  ; declaram functiile externe necesare programului nostru 
     6                                  extern exit ; indicam asamblorului ca exit exista, chiar daca noi nu o vom defini
     7                                  import exit msvcrt.dll  ; exit este o functie care incheie procesul, este definita in msvcrt.dll
     8                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
     9                                  
    10                                  ; segmentul de date in care se vor defini variabilele 
    11                                  segment data use32 class=data
    12                                  ; a,b,c-byte 
    13                                  ; e-doubleword
    14                                  ;x-qword
    15 00000000 05                      a db 5
    16 00000001 02                      b db 2
    17 00000002 01                      c db 1
    18 00000003 0A000000                e dd 10
    19 00000007 0A00000000000000        x dq 10
    20                                  
    21                                  ; segmentul de cod
    22                                  segment code use32 class=code
    23                                  start:
    24                                  ;(a+a+b*c*100+x)/(a+10)+e*a fara semn
    25                                  ; rez=64
    26 00000000 A0[01000000]            mov al, byte[b]
    27 00000005 F625[02000000]          mul byte[c]                 ; ax = al*c = b*c
    28 0000000B 66BB6400                mov bx, 100
    29 0000000F 66F7E3                  mul bx                      ; dx:ax = ax*bx = b*c*100 
    30                                  
    31 00000012 8A1D[00000000]          mov bl, byte[a] 
    32 00000018 021D[00000000]          add bl, [a]                 ; bl = a+a 
    33 0000001E B700                    mov bh, 0                   ; bx = bl = a+a
    34 00000020 66B90000                mov cx, 0                   ; cx:bx = bx = a+a
    35                                  
    36 00000024 6601D8                  add ax, bx
    37 00000027 6611CA                  adc dx, cx                  ; dx:ax = b*c*100+a+a 
    38 0000002A 6652                    push dx
    39 0000002C 6650                    push ax
    40 0000002E 58                      pop eax                     ; eax = dx:ax = b*c*100+a+a
    41 0000002F BA00000000              mov edx, 0                  ; edx:eax =  b*c*100+a+a
    42                                  
    43 00000034 8B1D[07000000]          mov ebx, dword[x]
    44 0000003A 8B0D[0B000000]          mov ecx, dword[x+4]         ;ecx:ebx = x
    45                                  
    46 00000040 01D8                    add eax, ebx
    47 00000042 11CA                    adc edx, ecx                ; edx:eax = x+ b*c*100+a+a
    48                                  
    49 00000044 BB00000000              mov ebx, 0
    50 00000049 8A1D[00000000]          mov bl, byte[a]             
    51 0000004F B700                    mov bh, 0                   ; ebx = bx = a 
    52 00000051 80C30A                  add bl, 10                  ; bl = bl +10 = a+10 si ebx = bx = a+10
    53 00000054 F7F3                    div ebx                     ; eax = edx:eax/eb x= (x+ b*c*100+a+a)/(a+10)
    54                                  
    55 00000056 89C3                    mov ebx, eax                ; ebx = (x+ b*c*100+a+a)/(a+10)
    56                                  
    57 00000058 B800000000              mov eax, 0
    58 0000005D A0[00000000]            mov al, byte[a]
    59 00000062 B400                    mov ah, 0                   ; eax = ax = al = a 
    60 00000064 F725[03000000]          mul dword[e]                ; edx:eax = eax*e = a*e
    61                                  
    62 0000006A 01D8                    add eax, ebx
    63 0000006C 83D200                  adc edx, 0                  ; edx:eax = edx:eax + ebx = a*e + (x+ b*c*100+a+a)/(a+10)
    64                                              
    65                                  
    66                                  
    67                                  
    68                                      ; exit(0)
    69 0000006F 6A00                        push dword 0 ; se pune pe stiva parametrul functiei exit
    70 00000071 FF15[00000000]              call [exit] ; apelul functiei exit pentru terminarea executiei programului
