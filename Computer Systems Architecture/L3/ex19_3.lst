     1                                  bits 32 ;asamblare și compilare pentru arhitectura de 32 biți
     2                                  ; definim punctul de intrare in programul principal
     3                                  global start
     4                                  
     5                                  ; declaram functiile externe necesare programului nostru 
     6                                  extern exit ; indicam asamblorului ca exit exista, chiar daca noi nu o vom defini
     7                                  import exit msvcrt.dll  ; exit este o functie care incheie procesul, este definita in msvcrt.dll
     8                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
     9                                  
    10                                  ; segmentul de date in care se vor defini variabilele 
    11                                  segment data use32 class=data
    12                                  ; a,b,c-byte 
    13                                  ; e-doubleword
    14                                  ;x-qword
    15 00000000 28                      a db 40
    16 00000001 01                      b db 1
    17 00000002 FF                      c db -1
    18 00000003 01000000                e dd 1
    19 00000007 7800000000000000        x dq 120
    20 0000000F <res 00000004>          aux resd 1
    21                                  ; pt. valorile date rez=42
    22                                  
    23                                  ; segmentul de cod
    24                                  segment code use32 class=code
    25                                  start:
    26                                  ;(a+a+b*c*100+x)/(a+10)+e*a cu semn
    27 00000000 A0[01000000]            mov al, byte[b]
    28 00000005 8A1D[02000000]          mov bl, byte[c] 
    29 0000000B F6EB                    imul bl                 ; ax = al*bl = b*c 
    30 0000000D 66BB6400                mov bx, 100
    31 00000011 66F7EB                  imul bx                 ; dx:ax = ax*bx = b*c*100 
    32                                  
    33 00000014 6689D1                  mov cx, dx
    34 00000017 6689C3                  mov bx, ax              ; cx:bx = dx:ax = b*c*100 
    35                                  
    36 0000001A A0[00000000]            mov al, byte[a]
    37 0000001F 0205[00000000]          add al, [a]
    38 00000025 6698                    cbw                     ; ax = a+a 
    39 00000027 6601C3                  add bx, ax
    40 0000002A 6683D100                adc cx, 0               ; cx:bx = b*c*100 + a + a
    41                                  
    42 0000002E 6651                    push cx
    43 00000030 6653                    push bx
    44 00000032 58                      pop eax
    45 00000033 99                      cdq                     ; edx:eax = eax = cx:bx =  b*c*100 + a + a
    46                                  
    47 00000034 8B1D[07000000]          mov ebx, dword[x] 
    48 0000003A 8B0D[0B000000]          mov ecx, dword[x+4]     ; ecx:ebx = x
    49                                  
    50 00000040 01C3                    add ebx, eax
    51 00000042 11D1                    adc ecx, edx            ; ecx:ebx = x + b*c*100 + a + a
    52                                  
    53 00000044 A0[00000000]            mov al, byte[a] 
    54 00000049 040A                    add al, 10
    55 0000004B 6698                    cbw                     ; ax = al = a+10
    56 0000004D 98                      cwde                    ; eax = ax = a+10
    57 0000004E A3[0F000000]            mov [aux], eax
    58                                  
    59 00000053 89D8                    mov eax, ebx
    60 00000055 89CA                    mov edx, ecx            ; edx:eax = x + b*c*100 + a + a
    61 00000057 F73D[0F000000]          idiv dword[aux]         ; eax = edx:eax/aux = (x + b*c*100 + a + a)/(a+10)
    62                                  
    63 0000005D 89C3                    mov ebx, eax
    64 0000005F 89D1                    mov ecx, edx            ;ecx:ebx = edx:eax = (x + b*c*100 + a + a)/(a+10)
    65                                  
    66 00000061 A0[00000000]            mov al, byte[a]
    67 00000066 6698                    cbw                     ; ax = al = a 
    68 00000068 98                      cwde                    ; eax = ax = a
    69 00000069 F72D[03000000]          imul dword[e]           ; edx:eax = eax*e = a*e 
    70                                  
    71 0000006F 01D8                    add eax, ebx
    72 00000071 11CA                    adc edx, ecx            ;edx:eax = (x + b*c*100 + a + a)/(a+10) + a*e
    73                                  
    74                                  
    75                                      ; exit(0)
    76 00000073 6A00                        push dword 0 ; se pune pe stiva parametrul functiei exit
    77 00000075 FF15[00000000]              call [exit] ; apelul functiei exit pentru terminarea executiei programului
